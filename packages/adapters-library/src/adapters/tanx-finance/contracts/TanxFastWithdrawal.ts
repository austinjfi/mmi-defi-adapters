/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TanxFastWithdrawalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFunds"
      | "addFundsNative"
      | "authorize"
      | "authorized"
      | "deposit"
      | "depositNative"
      | "initialize"
      | "owner"
      | "processedWithdrawalIds"
      | "removeFunds"
      | "removeFundsNative"
      | "renounceOwnership"
      | "transferOwner"
      | "transferOwnership"
      | "withdraw"
      | "withdrawNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgedDeposit"
      | "BridgedWithdrawal"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFundsNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedWithdrawalIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFunds",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFundsNative",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [AddressLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFundsNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedWithdrawalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFundsNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
}

export namespace BridgedDepositEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgedWithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    withdrawalId: string
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    withdrawalId: string
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    withdrawalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TanxFastWithdrawal extends BaseContract {
  connect(runner?: ContractRunner | null): TanxFastWithdrawal;
  waitForDeployment(): Promise<this>;

  interface: TanxFastWithdrawalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFunds: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addFundsNative: TypedContractMethod<[], [void], "payable">;

  authorize: TypedContractMethod<
    [user: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  authorized: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  deposit: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositNative: TypedContractMethod<[], [void], "payable">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  processedWithdrawalIds: TypedContractMethod<
    [arg0: string],
    [boolean],
    "view"
  >;

  removeFunds: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeFundsNative: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  transferOwner: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      withdrawalId: string
    ],
    [void],
    "nonpayable"
  >;

  withdrawNative: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, withdrawalId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFunds"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addFundsNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "authorize"
  ): TypedContractMethod<
    [user: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorized"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processedWithdrawalIds"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFunds"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeFundsNative"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "transferOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      withdrawalId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNative"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, withdrawalId: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BridgedDeposit"
  ): TypedContractEvent<
    BridgedDepositEvent.InputTuple,
    BridgedDepositEvent.OutputTuple,
    BridgedDepositEvent.OutputObject
  >;
  getEvent(
    key: "BridgedWithdrawal"
  ): TypedContractEvent<
    BridgedWithdrawalEvent.InputTuple,
    BridgedWithdrawalEvent.OutputTuple,
    BridgedWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BridgedDeposit(address,address,uint256)": TypedContractEvent<
      BridgedDepositEvent.InputTuple,
      BridgedDepositEvent.OutputTuple,
      BridgedDepositEvent.OutputObject
    >;
    BridgedDeposit: TypedContractEvent<
      BridgedDepositEvent.InputTuple,
      BridgedDepositEvent.OutputTuple,
      BridgedDepositEvent.OutputObject
    >;

    "BridgedWithdrawal(address,address,uint256,string)": TypedContractEvent<
      BridgedWithdrawalEvent.InputTuple,
      BridgedWithdrawalEvent.OutputTuple,
      BridgedWithdrawalEvent.OutputObject
    >;
    BridgedWithdrawal: TypedContractEvent<
      BridgedWithdrawalEvent.InputTuple,
      BridgedWithdrawalEvent.OutputTuple,
      BridgedWithdrawalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
